{
	"member": [
		{
			"kind": "member",
			"type": "string",
			"name": "NAME",
			"memberof": "core.Mediator",
			"scope": "static",
			"description": "Default name of the <code>Mediator</code>.",
			"default": "'Mediator'"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "mediatorName",
			"memberof": "core.Mediator",
			"scope": "instance",
			"description": "The name of the <code>Mediator</code>.",
			"default": "null"
		},
		{
			"kind": "member",
			"type": "any",
			"name": "viewComponent",
			"memberof": "core.Mediator",
			"scope": "instance",
			"description": "The <code>Mediator</code>'s view component.",
			"default": "null"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "Mediator",
			"memberof": "core.Mediator",
			"scope": "instance",
			"params": [
				{
					"name": "mediatorName",
					"type": "string",
					"default": "null",
					"description": ""
				},
				{
					"name": "viewComponent",
					"type": "any",
					"default": "null",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "string",
			"name": "getMediatorName",
			"memberof": "core.Mediator",
			"scope": "instance"
		},
		{
			"kind": "function",
			"type": "any",
			"name": "getViewComponent",
			"memberof": "core.Mediator",
			"scope": "instance"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "handleNotification",
			"memberof": "core.Mediator",
			"scope": "instance",
			"description": "Handle <code>INotification</code>s.Typically this will be handled in a switch statement, with one 'case' entry per<code>INotification</code> the <code>Mediator</code> is interested in.",
			"params": [
				{
					"name": "notification",
					"type": "core.INotification",
					"description": "The notification instance to be handled."
				}
			]
		},
		{
			"kind": "function",
			"type": "string[]",
			"name": "listNotificationInterests",
			"memberof": "core.Mediator",
			"scope": "instance",
			"description": "List the <code>INotification</code> names this <code>IMediator</code> is interested inbeing notified of.",
			"returns": "The list of notifications names in which is interested the <code>Mediator</code>."
		},
		{
			"kind": "function",
			"type": "void",
			"name": "onRegister",
			"memberof": "core.Mediator",
			"scope": "instance",
			"description": "Called by the View when the Mediator is registered. This method has to be overriddenby the subclass to know when the instance is registered."
		},
		{
			"kind": "function",
			"type": "void",
			"name": "onRemove",
			"memberof": "core.Mediator",
			"scope": "instance",
			"description": "Called by the View when the Mediator is removed. This method has to be overriddenby the subclass to know when the instance is removed."
		},
		{
			"kind": "function",
			"type": "void",
			"name": "setViewComponent",
			"memberof": "core.Mediator",
			"scope": "instance",
			"params": [
				{
					"name": "viewComponent",
					"type": "any",
					"description": ""
				}
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "Mediator",
		"memberof": "core",
		"filename": "core\\mvc\\Mediator.ts",
		"implements": [
			{
				"name": "core.IMediator"
			}
		],
		"children": [
			"core.CoreMediator",
			"core.CheckSceneVisibleMediator",
			"core.ClearExpireUICacheMediator",
			"core.QueueBoxMediator",
			"ModuleMeditore"
		]
	}
}